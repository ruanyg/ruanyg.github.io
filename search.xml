<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>zsh安装与使用</title>
    <url>/2020/03/18/zsh/</url>
    <content><![CDATA[<h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure>
<h3 id="zsh的开启"><a href="#zsh的开启" class="headerlink" title="zsh的开启"></a>zsh的开启</h3><p>设置zsh为你的默认的shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<p>重启并开始使用你的zsh (打开一个新的终端窗口便可)</p>
<h3 id="插件安装方法"><a href="#插件安装方法" class="headerlink" title="插件安装方法"></a>插件安装方法</h3><p>以安装zsh-autosuggestions为例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<p>编辑~/.zshrc文件，找到plugins=(git)这一行，然后再添加autosuggestions，最后为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">plugins=(git zsh-autosuggestions)</span><br></pre></td></tr></table></figure>
<p>source ./zshrc更新下你的zsh</p>
<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><ul>
<li>z</li>
<li>zsh-autosuggestions</li>
</ul>
<h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>编辑~/.zshrc文件，找到ZSH_THEME=”robbyrussell”这一行，修改为推荐主题ys，最后为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ZSH_THEME="ys"</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>搭建hexo+github</title>
    <url>/2020/03/18/%E6%90%AD%E5%BB%BAhexo+github%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>github新建一个仓库，仓库名必须为 &lt;user-name&gt;.github.io 格式，其中 &lt;user-name&gt; 是你 github 的昵称。</p>
<h3 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>新建本地项目hexo-blog，执行下述命令自动构建hexo项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<h3 id="主题引入"><a href="#主题引入" class="headerlink" title="主题引入"></a>主题引入</h3><p>主题官网为：<a href="https://hexo.io/themes" target="_blank" rel="noopener">https://hexo.io/themes</a><br>以引入NexT主题为例，进入hexo项目的themes文件夹下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git</span><br></pre></td></tr></table></figure>
<p>在hexo项目根目录下找到_config.xml，将theme属性改为hexo-theme-next</p>
<h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><p>编辑_config.xml，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:ruanyg&#x2F;ruanyg.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>安装hexo-deployer-git，用来帮助我们把博客项目推到仓库上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>执行如下命令，把项目自动部署到github上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清除缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成静态页面</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将资源提交到服务器中</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><p>浏览器访问：<a href="https://ruanyg.github.io/" target="_blank" rel="noopener">https://ruanyg.github.io/</a> 即可看到效果。</p>
<h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> [layout] 为布局，可选项为 `post`、`page`、`draft`，这将决定文章所在文件路径。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &lt;title&gt; 为文章标题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如 hexo new post 除了帅气，我还有啥！</span></span><br><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<h3 id="部署优化"><a href="#部署优化" class="headerlink" title="部署优化"></a>部署优化</h3><p>每次都要执行 hexo clean 和 hexo deploy，不如写个新的脚本，编辑package.json</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">"dev": "hexo s",</span><br><span class="line">"build": "hexo clean &amp; hexo deploy"</span><br></pre></td></tr></table></figure>

<h3 id="hexo-deployer-git高级使用技巧"><a href="#hexo-deployer-git高级使用技巧" class="headerlink" title="hexo-deployer-git高级使用技巧"></a>hexo-deployer-git高级使用技巧</h3><ul>
<li>将hexo项目根目录下的CNAME文件上传到github仓库  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:ruanyg/ruanyg.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  extend_dirs: /</span><br><span class="line">  ignore_pattern:</span><br><span class="line">    /: (node_modules)|(scaffolds)|(source)|(themes)|(public)|(_config.yml)|(db.json)|(package-lock.json)|(package.json)</span><br></pre></td></tr></table></figure></li>
<li>将源文件和生成的页面文件分别推送到不同的分支  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repo: git@github.com:ruanyg/ruanyg.github.io.git</span><br><span class="line">    branch: master</span><br><span class="line">  - type: git</span><br><span class="line">    repo: git@github.com:ruanyg/ruanyg.github.io.git</span><br><span class="line">    branch: src</span><br><span class="line">    extend_dirs: /</span><br><span class="line">    ignore_hidden: false</span><br><span class="line">    ignore_pattern:</span><br><span class="line">        public: .</span><br></pre></td></tr></table></figure></li>
<li>参考资料：<a href="https://www.npmjs.com/package/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git文档</a></li>
</ul>
<h3 id="接入评论系统-valine"><a href="#接入评论系统-valine" class="headerlink" title="接入评论系统 - valine"></a>接入评论系统 - valine</h3><p><a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">https://valine.js.org/quickstart.html</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><a href="https://www.jianshu.com/p/683a120c6264" target="_blank" rel="noopener">映射域名</a></li>
<li><a href="https://www.jianshu.com/p/37769040891f" target="_blank" rel="noopener">hexo-theme-next主题设置</a></li>
<li><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93251246" target="_blank" rel="noopener">hexo-theme-next主题更改语言</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>mysql主从备份</title>
    <url>/2019/04/03/mysql-master-slave/</url>
    <content><![CDATA[<h1 id="master的配置与启动"><a href="#master的配置与启动" class="headerlink" title="master的配置与启动"></a>master的配置与启动</h1><h2 id="配置容器"><a href="#配置容器" class="headerlink" title="配置容器"></a>配置容器</h2><ul>
<li>mkdir -p /etc/docker-data/mysql1/conf.d</li>
<li>vi /etc/docker-data/mysql1/conf.d/mysql.cnf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">pid-file    &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</span><br><span class="line">socket    &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock</span><br><span class="line">datadir    &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line"></span><br><span class="line">symbolic-links&#x3D;0</span><br><span class="line"></span><br><span class="line">character-set-server &#x3D; utf8</span><br><span class="line">#skip-networking</span><br><span class="line">innodb_print_all_deadlocks &#x3D; 1</span><br><span class="line">max_connections &#x3D; 2000</span><br><span class="line">max_connect_errors &#x3D; 6000</span><br><span class="line">open_files_limit &#x3D; 65535</span><br><span class="line">table_open_cache &#x3D; 128</span><br><span class="line">max_allowed_packet &#x3D; 4M</span><br><span class="line">binlog_cache_size &#x3D; 1M</span><br><span class="line">max_heap_table_size &#x3D; 8M</span><br><span class="line">tmp_table_size &#x3D; 16M</span><br><span class="line"></span><br><span class="line">read_buffer_size &#x3D; 2M</span><br><span class="line">read_rnd_buffer_size &#x3D; 8M</span><br><span class="line">sort_buffer_size &#x3D; 8M</span><br><span class="line">join_buffer_size &#x3D; 28M</span><br><span class="line">key_buffer_size &#x3D; 4M</span><br><span class="line"></span><br><span class="line">thread_cache_size &#x3D; 8</span><br><span class="line"></span><br><span class="line">query_cache_type &#x3D; 1</span><br><span class="line">query_cache_size &#x3D; 8M</span><br><span class="line">query_cache_limit &#x3D; 2M</span><br><span class="line"></span><br><span class="line">ft_min_word_len &#x3D; 4</span><br><span class="line"></span><br><span class="line">log-bin &#x3D; mysql-bin</span><br><span class="line">server-id &#x3D; 1</span><br><span class="line">binlog_format &#x3D; mixed</span><br><span class="line"></span><br><span class="line">performance_schema &#x3D; 0</span><br><span class="line">explicit_defaults_for_timestamp</span><br><span class="line"></span><br><span class="line">#lower_case_table_names &#x3D; 1</span><br><span class="line"></span><br><span class="line">interactive_timeout &#x3D; 28800</span><br><span class="line">wait_timeout &#x3D; 28800</span><br><span class="line"></span><br><span class="line"># Recommended in standard MySQL setup</span><br><span class="line"></span><br><span class="line">sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet &#x3D; 16M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size &#x3D; 8M</span><br><span class="line">sort_buffer_size &#x3D; 8M</span><br><span class="line">read_buffer &#x3D; 4M</span><br><span class="line">write_buffer &#x3D; 4M</span><br></pre></td></tr></table></figure>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2>docker run –name mysql1 -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d -v /etc/docker-data/mysql1/conf.d:/etc/mysql/conf.d -v /logs/docker-data/mysql1:/logs -v /var/lib/docker-data/mysql1:/var/lib/mysql mysql:5.6<h2 id="进入容器开启slave远程访问"><a href="#进入容器开启slave远程访问" class="headerlink" title="进入容器开启slave远程访问"></a>进入容器开启slave远程访问</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* to &#39;reader&#39;@&#39;%&#39; identified by &#39;readerpwd&#39;;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<h1 id="slave的配置与启动"><a href="#slave的配置与启动" class="headerlink" title="slave的配置与启动"></a>slave的配置与启动</h1><h2 id="配置容器-1"><a href="#配置容器-1" class="headerlink" title="配置容器"></a>配置容器</h2></li>
<li>mkdir -p /etc/docker-data/mysql2/conf.d</li>
<li>vi /etc/docker-data/mysql2/conf.d/mysql.cnf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">pid-file    &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</span><br><span class="line">socket    &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock</span><br><span class="line">datadir    &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line"></span><br><span class="line">symbolic-links&#x3D;0</span><br><span class="line"></span><br><span class="line">character-set-server &#x3D; utf8</span><br><span class="line">#skip-networking</span><br><span class="line">innodb_print_all_deadlocks &#x3D; 1</span><br><span class="line">max_connections &#x3D; 2000</span><br><span class="line">max_connect_errors &#x3D; 6000</span><br><span class="line">open_files_limit &#x3D; 65535</span><br><span class="line">table_open_cache &#x3D; 128</span><br><span class="line">max_allowed_packet &#x3D; 4M</span><br><span class="line">binlog_cache_size &#x3D; 1M</span><br><span class="line">max_heap_table_size &#x3D; 8M</span><br><span class="line">tmp_table_size &#x3D; 16M</span><br><span class="line"></span><br><span class="line">read_buffer_size &#x3D; 2M</span><br><span class="line">read_rnd_buffer_size &#x3D; 8M</span><br><span class="line">sort_buffer_size &#x3D; 8M</span><br><span class="line">join_buffer_size &#x3D; 28M</span><br><span class="line">key_buffer_size &#x3D; 4M</span><br><span class="line"></span><br><span class="line">thread_cache_size &#x3D; 8</span><br><span class="line"></span><br><span class="line">query_cache_type &#x3D; 1</span><br><span class="line">query_cache_size &#x3D; 8M</span><br><span class="line">query_cache_limit &#x3D; 2M</span><br><span class="line"></span><br><span class="line">ft_min_word_len &#x3D; 4</span><br><span class="line"></span><br><span class="line">log-bin &#x3D; mysql-bin</span><br><span class="line">server-id &#x3D; 2</span><br><span class="line">binlog_format &#x3D; mixed</span><br><span class="line"></span><br><span class="line">performance_schema &#x3D; 0</span><br><span class="line">explicit_defaults_for_timestamp</span><br><span class="line"></span><br><span class="line">#lower_case_table_names &#x3D; 1</span><br><span class="line"></span><br><span class="line">interactive_timeout &#x3D; 28800</span><br><span class="line">wait_timeout &#x3D; 28800</span><br><span class="line"></span><br><span class="line"># Recommended in standard MySQL setup</span><br><span class="line"></span><br><span class="line">sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet &#x3D; 16M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size &#x3D; 8M</span><br><span class="line">sort_buffer_size &#x3D; 8M</span><br><span class="line">read_buffer &#x3D; 4M</span><br><span class="line">write_buffer &#x3D; 4M</span><br></pre></td></tr></table></figure>
<h2 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h2></li>
<li>docker run –name mysql2 -e MYSQL_ROOT_PASSWORD=123456 -p 3307:3306 -d -v /etc/docker-data/mysql2/conf.d:/etc/mysql/conf.d -v /logs/docker-data/mysql2:/logs -v /var/lib/docker-data/mysql2:/var/lib/mysql mysql:5.6</li>
</ul>
<h1 id="主从复制配置"><a href="#主从复制配置" class="headerlink" title="主从复制配置"></a>主从复制配置</h1><ul>
<li>进入master<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000007 |      675 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li>进入slave<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; change master to master_host&#x3D;&#39;172.16.114.118&#39;,master_user&#x3D;&#39;reader&#39;,master_password&#x3D;&#39;readerpwd&#39;,master_log_file&#x3D;&#39;mysql-bin.000007&#39;,master_log_pos&#x3D;675;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">               Master_Host: 192.168.1.9</span><br><span class="line">                  Master_User: reader</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000007</span><br><span class="line">          Read_Master_Log_Pos: 501</span><br><span class="line">               Relay_Log_File: 0b763a8d1ddd-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000007</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>
<ul>
<li>其中172.16.114.118是docker宿主机ifconfig查得的结果</li>
<li>要保证master和slave初始数据状态完全一致</li>
</ul>
</li>
</ul>
<h1 id="主从复制测试"><a href="#主从复制测试" class="headerlink" title="主从复制测试"></a>主从复制测试</h1><h2 id="进入master"><a href="#进入master" class="headerlink" title="进入master"></a>进入master</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database slavetest;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<h2 id="进入slave"><a href="#进入slave" class="headerlink" title="进入slave"></a>进入slave</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| slavetest          |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
